/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_sqlite_SQLite */

#ifndef _Included_org_sqlite_SQLite
#define _Included_org_sqlite_SQLite
#ifdef __cplusplus
extern "C" {
#endif
#undef org_sqlite_SQLite_SQLITE_OK
#define org_sqlite_SQLite_SQLITE_OK 0L
#undef org_sqlite_SQLite_SQLITE_ROW
#define org_sqlite_SQLite_SQLITE_ROW 100L
#undef org_sqlite_SQLite_SQLITE_DONE
#define org_sqlite_SQLite_SQLITE_DONE 101L
#undef org_sqlite_SQLite_SQLITE_TRANSIENT
#define org_sqlite_SQLite_SQLITE_TRANSIENT -1L
#undef org_sqlite_SQLite_SQLITE_CONFIG_SINGLETHREAD
#define org_sqlite_SQLite_SQLITE_CONFIG_SINGLETHREAD 1L
#undef org_sqlite_SQLite_SQLITE_CONFIG_MULTITHREAD
#define org_sqlite_SQLite_SQLITE_CONFIG_MULTITHREAD 2L
#undef org_sqlite_SQLite_SQLITE_CONFIG_SERIALIZED
#define org_sqlite_SQLite_SQLITE_CONFIG_SERIALIZED 3L
#undef org_sqlite_SQLite_SQLITE_CONFIG_MEMSTATUS
#define org_sqlite_SQLite_SQLITE_CONFIG_MEMSTATUS 9L
#undef org_sqlite_SQLite_SQLITE_CONFIG_LOG
#define org_sqlite_SQLite_SQLITE_CONFIG_LOG 16L
#undef org_sqlite_SQLite_SQLITE_CONFIG_URI
#define org_sqlite_SQLite_SQLITE_CONFIG_URI 17L
#undef org_sqlite_SQLite_SQLITE_LIMIT_LENGTH
#define org_sqlite_SQLite_SQLITE_LIMIT_LENGTH 0L
#undef org_sqlite_SQLite_SQLITE_LIMIT_SQL_LENGTH
#define org_sqlite_SQLite_SQLITE_LIMIT_SQL_LENGTH 1L
#undef org_sqlite_SQLite_SQLITE_LIMIT_COLUMN
#define org_sqlite_SQLite_SQLITE_LIMIT_COLUMN 2L
#undef org_sqlite_SQLite_SQLITE_LIMIT_EXPR_DEPTH
#define org_sqlite_SQLite_SQLITE_LIMIT_EXPR_DEPTH 3L
#undef org_sqlite_SQLite_SQLITE_LIMIT_COMPOUND_SELECT
#define org_sqlite_SQLite_SQLITE_LIMIT_COMPOUND_SELECT 4L
#undef org_sqlite_SQLite_SQLITE_LIMIT_VDBE_OP
#define org_sqlite_SQLite_SQLITE_LIMIT_VDBE_OP 5L
#undef org_sqlite_SQLite_SQLITE_LIMIT_FUNCTION_ARG
#define org_sqlite_SQLite_SQLITE_LIMIT_FUNCTION_ARG 6L
#undef org_sqlite_SQLite_SQLITE_LIMIT_ATTACHED
#define org_sqlite_SQLite_SQLITE_LIMIT_ATTACHED 7L
#undef org_sqlite_SQLite_SQLITE_LIMIT_LIKE_PATTERN_LENGTH
#define org_sqlite_SQLite_SQLITE_LIMIT_LIKE_PATTERN_LENGTH 8L
#undef org_sqlite_SQLite_SQLITE_LIMIT_VARIABLE_NUMBER
#define org_sqlite_SQLite_SQLITE_LIMIT_VARIABLE_NUMBER 9L
#undef org_sqlite_SQLite_SQLITE_LIMIT_TRIGGER_DEPTH
#define org_sqlite_SQLite_SQLITE_LIMIT_TRIGGER_DEPTH 10L
/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_libversion
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1libversion
  (JNIEnv *, jclass);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_libversion_number
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1libversion_1number
  (JNIEnv *, jclass);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_threadsafe
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_org_sqlite_SQLite_sqlite3_1threadsafe
  (JNIEnv *, jclass);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_compileoption_used
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_sqlite_SQLite_sqlite3_1compileoption_1used
  (JNIEnv *, jclass, jstring);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_config
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1config__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_config
 * Signature: (IZ)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1config__IZ
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_config
 * Signature: (ILorg/sqlite/SQLite/LogCallback;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1config__ILorg_sqlite_SQLite_LogCallback_2
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_log
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_sqlite_SQLite_sqlite3_1log
  (JNIEnv *, jclass, jint, jstring);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_errmsg
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1errmsg
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_errcode
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1errcode
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_extended_result_codes
 * Signature: (JZ)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1extended_1result_1codes
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_extended_errcode
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1extended_1errcode
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_initialize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1initialize
  (JNIEnv *, jclass);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_shutdown
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1shutdown
  (JNIEnv *, jclass);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_open_v2
 * Signature: (Ljava/lang/String;[JILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1open_1v2
  (JNIEnv *, jclass, jstring, jlongArray, jint, jstring);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_close
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1close
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_close_v2
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1close_1v2
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_interrupt
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_sqlite_SQLite_sqlite3_1interrupt
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_busy_timeout
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1busy_1timeout
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_db_config
 * Signature: (JII[I)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1db_1config
  (JNIEnv *, jclass, jlong, jint, jint, jintArray);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_enable_load_extension
 * Signature: (JZ)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1enable_1load_1extension
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_load_extension
 * Signature: (JLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1load_1extension
  (JNIEnv *, jclass, jlong, jstring, jstring, jobjectArray);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_limit
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1limit
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_get_autocommit
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_sqlite_SQLite_sqlite3_1get_1autocommit
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_changes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1changes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_total_changes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1total_1changes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_last_insert_rowid
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_sqlite_SQLite_sqlite3_1last_1insert_1rowid
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_db_filename
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1db_1filename
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_db_readonly
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1db_1readonly
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_table_column_metadata
 * Signature: (JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[I)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1table_1column_1metadata
  (JNIEnv *, jclass, jlong, jstring, jstring, jstring, jobjectArray, jobjectArray, jintArray);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_exec
 * Signature: (JLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1exec
  (JNIEnv *, jclass, jlong, jstring, jobject, jobject, jobjectArray);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_prepare_v2
 * Signature: (JLjava/lang/String;I[J[Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1prepare_1v2
  (JNIEnv *, jclass, jlong, jstring, jint, jlongArray, jobjectArray);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_sql
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1sql
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_finalize
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1finalize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_step
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1step
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_reset
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1reset
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_clear_bindings
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1clear_1bindings
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_stmt_busy
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_sqlite_SQLite_sqlite3_1stmt_1busy
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_stmt_readonly
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_sqlite_SQLite_sqlite3_1stmt_1readonly
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_count
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1count
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_data_count
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1data_1count
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_type
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1type
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_name
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1name
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_origin_name
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1origin_1name
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_table_name
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1table_1name
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_database_name
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1database_1name
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_decltype
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1decltype
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_blob
 * Signature: (JI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1blob
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_bytes
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1bytes
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_double
 * Signature: (JI)D
 */
JNIEXPORT jdouble JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1double
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_int
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1int
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_int64
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1int64
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_column_text
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1column_1text
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_parameter_count
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1parameter_1count
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_parameter_index
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1parameter_1index
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_parameter_name
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1parameter_1name
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_blob
 * Signature: (JI[BIJ)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1blob
  (JNIEnv *, jclass, jlong, jint, jbyteArray, jint, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_double
 * Signature: (JID)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1double
  (JNIEnv *, jclass, jlong, jint, jdouble);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_int
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1int
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_int64
 * Signature: (JIJ)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1int64
  (JNIEnv *, jclass, jlong, jint, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_null
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1null
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_text
 * Signature: (JILjava/lang/String;IJ)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1text
  (JNIEnv *, jclass, jlong, jint, jstring, jint, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_bind_zeroblob
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1bind_1zeroblob
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_blob_open
 * Signature: (JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;JZ[J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1blob_1open
  (JNIEnv *, jclass, jlong, jstring, jstring, jstring, jlong, jboolean, jlongArray);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_blob_reopen
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1blob_1reopen
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_blob_bytes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1blob_1bytes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_blob_read
 * Signature: (J[BIII)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1blob_1read
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_blob_write
 * Signature: (J[BIII)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1blob_1write
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_blob_close
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1blob_1close
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_backup_init
 * Signature: (JLjava/lang/String;JLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_org_sqlite_SQLite_sqlite3_1backup_1init
  (JNIEnv *, jclass, jlong, jstring, jlong, jstring);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_backup_step
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1backup_1step
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_backup_remaining
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1backup_1remaining
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_backup_pagecount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1backup_1pagecount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_backup_finish
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1backup_1finish
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    free_callback_context
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_sqlite_SQLite_free_1callback_1context
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_progress_handler
 * Signature: (JILorg/sqlite/SQLite/ProgressCallback;)J
 */
JNIEXPORT jlong JNICALL Java_org_sqlite_SQLite_sqlite3_1progress_1handler
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_trace
 * Signature: (JLorg/sqlite/TraceCallback;)J
 */
JNIEXPORT jlong JNICALL Java_org_sqlite_SQLite_sqlite3_1trace
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_create_function_v2
 * Signature: (JLjava/lang/String;IILjava/lang/Object;Lorg/sqlite/ScalarCallback;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)I
 */
JNIEXPORT jint JNICALL Java_org_sqlite_SQLite_sqlite3_1create_1function_1v2
  (JNIEnv *, jclass, jlong, jstring, jint, jint, jobject, jobject, jobject, jobject, jobject);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_result_null
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_sqlite_SQLite_sqlite3_1result_1null
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_sqlite_SQLite
 * Method:    sqlite3_result_int
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_sqlite_SQLite_sqlite3_1result_1int
  (JNIEnv *, jclass, jlong, jint);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class org_sqlite_SQLite_ProgressCallback */

#ifndef _Included_org_sqlite_SQLite_ProgressCallback
#define _Included_org_sqlite_SQLite_ProgressCallback
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class org_sqlite_SQLite_LogCallback */

#ifndef _Included_org_sqlite_SQLite_LogCallback
#define _Included_org_sqlite_SQLite_LogCallback
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
