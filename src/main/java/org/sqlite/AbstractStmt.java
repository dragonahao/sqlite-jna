/*
 * The author disclaims copyright to this source code.  In place of
 * a legal notice, here is a blessing:
 *
 *    May you do good and not evil.
 *    May you find forgiveness for yourself and forgive others.
 *    May you share freely, never taking more than you give.
 */
package org.sqlite;

import java.sql.*;

public abstract class AbstractStmt implements Statement {
  abstract void check(int res, String reason) throws StmtException;
  abstract void checkOpen() throws StmtException;
  abstract int _close();
  abstract void interrupt() throws ConnException;
  abstract void exec(String sql) throws SQLException;
  abstract int getChanges() throws ConnException;

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    return null; // FIXME
  }
  @Override
  public int executeUpdate(String sql) throws SQLException {
    exec(sql);
    return getChanges();
  }
  @Override
  public void close() throws StmtException {
    check(_close(), "error while closing statement '%s'");
  }
  @Override
  public int getMaxFieldSize() throws SQLException {
    checkOpen();
    return 0; // TODO
  }
  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    if (max < 0) throw new SQLException("max field size must be >= 0");
    checkOpen();
    // TODO
  }
  @Override
  public int getMaxRows() throws SQLException {
    return 0; // FIXME
  }
  @Override
  public void setMaxRows(int max) throws SQLException {
    if (max < 0) throw new SQLException("max row count must be >= 0");
    // FIXME
  }
  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    checkOpen();
    // TODO
  }
  @Override
  public int getQueryTimeout() throws SQLException {
    checkOpen();
    return 0; // TODO
  }
  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    if (seconds < 0) throw new SQLException("query timeout must be >= 0");
    checkOpen();
    // TODO
  }
  @Override
  public void cancel() throws SQLException {
    checkOpen();
    interrupt();
  }
  @Override
  public SQLWarning getWarnings() throws SQLException {
    checkOpen();
    return null;
  }
  @Override
  public void clearWarnings() throws SQLException {
    checkOpen();
  }
  @Override
  public void setCursorName(String name) throws SQLException {
    checkOpen();
    // TODO
  }
  @Override
  public boolean execute(String sql) throws SQLException {
    return false; // FIXME
  }
  @Override
  public ResultSet getResultSet() throws SQLException {
    return null; // FIXME
  }
  @Override
  public int getUpdateCount() throws SQLException {
    checkOpen();
    return 0; // FIXME
  }
  @Override
  public boolean getMoreResults() throws SQLException {
    return false; // FIXME
  }
  @Override
  public void setFetchDirection(int direction) throws SQLException {
    checkOpen();
    if (ResultSet.FETCH_FORWARD != direction) {
      throw new SQLException("SQLite supports only FETCH_FORWARD direction");
    }
  }
  @Override
  public int getFetchDirection() throws SQLException {
    checkOpen();
    return ResultSet.FETCH_FORWARD;
  }
  @Override
  public void setFetchSize(int rows) throws SQLException {
    if (rows < 0) throw new SQLException("fetch size must be >= 0");
    checkOpen();
    if (rows != 1) {
      throw new SQLException("SQLite does not support setting fetch size");
    }
  }
  @Override
  public int getFetchSize() throws SQLException {
    checkOpen();
    return 1;
  }
  @Override
  public int getResultSetConcurrency() throws SQLException {
    return ResultSet.CONCUR_READ_ONLY;
  }
  @Override
  public int getResultSetType() throws SQLException {
    return ResultSet.TYPE_FORWARD_ONLY;
  }
  @Override
  public void addBatch(String sql) throws SQLException {
    // FIXME
  }
  @Override
  public void clearBatch() throws SQLException {
    // FIXME
  }
  @Override
  public int[] executeBatch() throws SQLException {
    return new int[0]; // FIXME
  }
  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return false; // FIXME
  }
  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return null; // FIXME
  }
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    if (Statement.NO_GENERATED_KEYS != autoGeneratedKeys) {
      throw Util.unsupported();
    }
    return executeUpdate(sql);
  }
  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    throw Util.unsupported();
  }
  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    throw Util.unsupported();
  }
  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    if (Statement.NO_GENERATED_KEYS != autoGeneratedKeys) {
      throw Util.unsupported();
    }
    return execute(sql);
  }
  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    throw Util.unsupported();
  }
  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    throw Util.unsupported();
  }
  @Override
  public int getResultSetHoldability() throws SQLException {
    return ResultSet.CLOSE_CURSORS_AT_COMMIT;
  }
  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    checkOpen();
    // TODO
  }
  @Override
  public boolean isPoolable() throws SQLException {
    checkOpen();
    return false; // TODO
  }
  @Override
  public void closeOnCompletion() throws SQLException {
    checkOpen();
    // TODO
  }
  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    checkOpen();
    return false; // TODO
  }
  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    throw new SQLException("not a wrapper");
  }
  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return false;
  }
}
